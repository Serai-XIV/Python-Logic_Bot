Logical_Symbols = {
    "Negation": ["¬¨", "~", "!", "not"],
    "Conjunction": ["‚àß", "&", "¬∑", "and"],
    "Inclusive Disjunction": ["‚à®", "or"],
    "Material Conditional": ["‚Üí", "‚áí", "‚äÉ", "if, then"],
    "Material Bi-Conditional": ["‚Üî", "‚áî", "‚â°"],
    "Universal Quantifier": "‚àÄ",
    "Existential Quantifier": "‚àÉ",
    "Falsum": "‚ä•",
    "Verum": "‚ä§",
    "Identical to": "=",
    "Variables": ["x", "y", "z"],
}

Non_Logical_Symbols = {
    "Subscript": ["‚ÇÄ", "‚ÇÅ", "‚ÇÉ", "‚ÇÑ", "‚ÇÖ", "‚ÇÜ", "‚Çá", "‚Çà", "‚Çâ"],
    "Predicate": "ABCDEFGHIJKLMNOPQRSTUVWXYZ",
    "Constants": "abcdefghijklmopqrstuvw",
    "Function Symbol": "ùëì",
    "Punctuation marks": "(,) ,",
}

Bivalence = {"True": "T", "False": "F"}


def valuation(Forumla):  # The Defintion of the valuation Function

    if Forumla == Bivalence["False"]:
        Formula = False
    else:
        Formula = True
    
    return Formula


def Negation(Proposition = 'P'):

    if valuation(Proposition):
        Proposition = Bivalence["False"]
    else:
        Proposition = Bivalence["True"]
    
    return Proposition

print(Negation('P'))
